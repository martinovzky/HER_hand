#usda 1.0
(
    doc = "Table at hand height for grasp and flip task"
    metersPerUnit = 1
    upAxis = "Z"
)

# Physics scene at root level
def PhysicsScene "PhysicsScene"
{
    vector3f physics:gravityDirection = (0, 0, -1)
    float physics:gravityMagnitude = 9.81
}

def Xform "Table" (
    kind = "component"
    prepend apiSchemas = ["PhysicsRigidBodyAPI"]
)
{
    # Make table static (kinematic)
    bool physics:rigidBodyEnabled = 1
    bool physics:kinematicEnabled = 1

    def Mesh "TableTop" (
        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMassAPI"]
    )
    {
        uniform bool doubleSided = 0
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 1, 0, 1, 7, 5, 3, 6, 0, 2, 4]
        rel material:binding = </Table/TableTop/Material>
        normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1)]
        point3f[] points = [(-0.3, -0.3, 0.295), (0.3, -0.3, 0.295), (-0.3, 0.3, 0.295), (0.3, 0.3, 0.295), (-0.3, 0.3, 0.305), (0.3, 0.3, 0.305), (-0.3, -0.3, 0.305), (0.3, -0.3, 0.305)]
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (0, 1), (1, 1), (0, 1), (1, 1), (0, 0), (1, 0)] (
            interpolation = "vertex"
        )
        uniform token subdivisionScheme = "none"
        
        # Physics properties
        bool physics:collisionEnabled = 1
        float physics:mass = 10.0
        float physics:restitution = 0.2
        float physics:dynamicFriction = 0.8
        float physics:staticFriction = 0.9

        def Material "Material"
        {
            token outputs:surface.connect = </Table/TableTop/Material/PBRShader.outputs:surface>

            def Shader "PBRShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.6, 0.4, 0.2)
                float inputs:metallic = 0.0
                float inputs:roughness = 0.8
                token outputs:surface
            }
        }
    }

    def Mesh "TableLegs" (
        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMassAPI"]
    )
    {
        uniform bool doubleSided = 0
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 1, 0, 1, 7, 5, 3, 6, 0, 2, 4, 8, 9, 11, 10, 10, 11, 13, 12, 12, 13, 15, 14, 14, 15, 9, 8, 9, 15, 13, 11, 14, 8, 10, 12, 16, 17, 19, 18, 18, 19, 21, 20, 20, 21, 23, 22, 22, 23, 17, 16, 17, 23, 21, 19, 22, 16, 18, 20, 24, 25, 27, 26, 26, 27, 29, 28, 28, 29, 31, 30, 30, 31, 25, 24, 25, 31, 29, 27, 30, 24, 26, 28]
        rel material:binding = </Table/TableLegs/Material>
        normal3f[] normals = [(1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, -1, 0), (0, 0, 1), (0, 0, -1)] (
            interpolation = "uniform"
        )
        point3f[] points = [(-0.28, -0.28, 0.0), (-0.25, -0.28, 0.0), (-0.28, -0.25, 0.0), (-0.25, -0.25, 0.0), (-0.28, -0.25, 0.295), (-0.25, -0.25, 0.295), (-0.28, -0.28, 0.295), (-0.25, -0.28, 0.295), (0.25, -0.28, 0.0), (0.28, -0.28, 0.0), (0.25, -0.25, 0.0), (0.28, -0.25, 0.0), (0.25, -0.25, 0.295), (0.28, -0.25, 0.295), (0.25, -0.28, 0.295), (0.28, -0.28, 0.295), (-0.28, 0.25, 0.0), (-0.25, 0.25, 0.0), (-0.28, 0.28, 0.0), (-0.25, 0.28, 0.0), (-0.28, 0.28, 0.295), (-0.25, 0.28, 0.295), (-0.28, 0.25, 0.295), (-0.25, 0.25, 0.295), (0.25, 0.25, 0.0), (0.28, 0.25, 0.0), (0.25, 0.28, 0.0), (0.28, 0.28, 0.0), (0.25, 0.28, 0.295), (0.28, 0.28, 0.295), (0.25, 0.25, 0.295), (0.28, 0.25, 0.295)]
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (0, 1), (1, 1)] (
            interpolation = "vertex"
        )
        uniform token subdivisionScheme = "none"
        
        # Physics properties for legs
        bool physics:collisionEnabled = 1
        float physics:mass = 2.0
        float physics:restitution = 0.2
        float physics:dynamicFriction = 0.8
        float physics:staticFriction = 0.9

        def Material "Material"
        {
            token outputs:surface.connect = </Table/TableLegs/Material/PBRShader.outputs:surface>

            def Shader "PBRShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.5, 0.3, 0.15)
                float inputs:metallic = 0.0
                float inputs:roughness = 0.9
                token outputs:surface
            }
        }
    }
}
