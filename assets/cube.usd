#usda 1.0
(
    doc = "Small cube for grasp and flip task"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "Cube" (
    kind = "component"
    prepend apiSchemas = ["PhysicsRigidBodyAPI"]
)
{
    # Physics properties for the rigid body
    bool physics:rigidBodyEnabled = 1
    bool physics:kinematicEnabled = 0

    def Mesh "CubeMesh" (
        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMassAPI"]
    )
    {
        uniform bool doubleSided = 0
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 1, 0, 1, 7, 5, 3, 6, 0, 2, 4]
        rel material:binding = </Cube/CubeMesh/Material>
        normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1)]
        point3f[] points = [(-0.025, -0.025, -0.025), (0.025, -0.025, -0.025), (-0.025, 0.025, -0.025), (0.025, 0.025, -0.025), (-0.025, 0.025, 0.025), (0.025, 0.025, 0.025), (-0.025, -0.025, 0.025), (0.025, -0.025, 0.025)]
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (0, 1), (1, 1), (0, 1), (1, 1), (0, 0), (1, 0)] (
            interpolation = "vertex"
        )
        uniform token subdivisionScheme = "none"
        
        # Physics properties
        bool physics:collisionEnabled = 1
        float physics:mass = 0.1
        vector3f physics:centerOfMass = (0, 0, 0)
        
        # Material properties for physics
        float physics:restitution = 0.3
        float physics:dynamicFriction = 0.5
        float physics:staticFriction = 0.6

        def Material "Material"
        {
            token outputs:surface.connect = </Cube/CubeMesh/Material/PBRShader.outputs:surface>

            def Shader "PBRShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.8, 0.2, 0.2)
                float inputs:metallic = 0.1
                float inputs:roughness = 0.5
                token outputs:surface
            }
        }
    }
}
it